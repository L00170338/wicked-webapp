{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Wicked-Adventures web-app documentation! This Project was created by the following brilliant Development Team memebers: Rodrigo Lima Panayotis Drakos Wagner Ribeiro Neha Tripathi Vitaliy Baseckas Muhammad Anwar Ul Haq Michael Dowling Wicked-Adventures web-app is Online booking system. The app support the following features: * Health and warning checkboxes. * Implement pipeline for the SDLC. * Implement Security requirement. * Super users to administrate bookings. * Bookings can only be modified by administrators. The technology behind the website: * HTML * CSS * Javascript * Python * Django * Postgres This page created by L00169827","title":"Home"},{"location":"#welcome-to-wicked-adventures-web-app-documentation","text":"This Project was created by the following brilliant Development Team memebers: Rodrigo Lima Panayotis Drakos Wagner Ribeiro Neha Tripathi Vitaliy Baseckas Muhammad Anwar Ul Haq Michael Dowling Wicked-Adventures web-app is Online booking system. The app support the following features: * Health and warning checkboxes. * Implement pipeline for the SDLC. * Implement Security requirement. * Super users to administrate bookings. * Bookings can only be modified by administrators.","title":"Welcome to Wicked-Adventures web-app documentation!"},{"location":"#the-technology-behind-the-website","text":"* HTML * CSS * Javascript * Python * Django * Postgres This page created by L00169827","title":"The technology behind the website:"},{"location":"autodoc/","text":"Auto Documentation Document automation (also known as document assembly or document management) is the design of systems and workflows that assist in the creation of electronic documents. These include logic-based systems that use segments of pre-existing text and/or data to assemble a new document. This process is increasingly used within certain industries to assemble legal documents, contracts and letters. Document automation systems can also be used to automate all conditional text, variable text, and data contained within a set of documents. Automation systems allow companies to minimize data entry, reduce the time spent proofreading, and reduce the risks associated with human error. Additional benefits include: time and financial savings due to decreased paper handling, document loading, storage, distribution, postage/shipping, faxes, telephone, labor and waste. * To generate the documentation of Django code the sphinx utility is used. Install sphinx by typing pip install sphinx Create the doc folder in you project Create and run python virtual environment Run sphinx-quickstart and answer the questions. 4x files will be created in doc folder Modify config.py as below Run make html The code will be documented import os import sys import django sys.path.insert(0, os.path.abspath('..')) os.environ['DJANGO_SETTINGS_MODULE'] = 'book' # ,config,members'#,'members' django.setup() project = 'Wicked-Adventure' copyright = '2022, Wednesday' author = 'Wednesday' The steps above demonstrate the code documentation creation of Wicked-Adventures project. These are part of publishdocs.yml workflow and can be slightly differ. To deploy the code to the server mkdocs and GitHub pages are used in this project. These steps are also as part of publishdocs.yml workflow which means the documentation is beeing generated automaticaly and publoshed to GitHub pages. Also, please see mkdocs.yml file in the root folder of the Project. These describes the layout of documentation. The documentatio is build and pushed to gh-branch in the same repo where the Project lives. Its important to make that branch as GitHub page. site_name: Wicked Adventures site_url: https://devopslecturer.github.io/awpgdip2022/ repo_name: GitHub docs_dir: doc/ nav: - Home: index.md - AutoDocs: autodoc.md - Back-end-testing: back-end-testing.md - Code: code.md - DAST: dast.md - Deployment: deployment.md - Installation: installation.md - Front-end-testing: front-end-testing.md - Monitoring: monitoring.md - SAST: sast.md theme: readthedocs Note1: The first paragpah is taken from Wikipedia Note2: The steps described in this document may require verification. This page is created by L00169827","title":"AutoDocs"},{"location":"autodoc/#auto-documentation","text":"Document automation (also known as document assembly or document management) is the design of systems and workflows that assist in the creation of electronic documents. These include logic-based systems that use segments of pre-existing text and/or data to assemble a new document. This process is increasingly used within certain industries to assemble legal documents, contracts and letters. Document automation systems can also be used to automate all conditional text, variable text, and data contained within a set of documents. Automation systems allow companies to minimize data entry, reduce the time spent proofreading, and reduce the risks associated with human error. Additional benefits include: time and financial savings due to decreased paper handling, document loading, storage, distribution, postage/shipping, faxes, telephone, labor and waste. * To generate the documentation of Django code the sphinx utility is used. Install sphinx by typing pip install sphinx Create the doc folder in you project Create and run python virtual environment Run sphinx-quickstart and answer the questions. 4x files will be created in doc folder Modify config.py as below Run make html The code will be documented import os import sys import django sys.path.insert(0, os.path.abspath('..')) os.environ['DJANGO_SETTINGS_MODULE'] = 'book' # ,config,members'#,'members' django.setup() project = 'Wicked-Adventure' copyright = '2022, Wednesday' author = 'Wednesday' The steps above demonstrate the code documentation creation of Wicked-Adventures project. These are part of publishdocs.yml workflow and can be slightly differ. To deploy the code to the server mkdocs and GitHub pages are used in this project. These steps are also as part of publishdocs.yml workflow which means the documentation is beeing generated automaticaly and publoshed to GitHub pages. Also, please see mkdocs.yml file in the root folder of the Project. These describes the layout of documentation. The documentatio is build and pushed to gh-branch in the same repo where the Project lives. Its important to make that branch as GitHub page. site_name: Wicked Adventures site_url: https://devopslecturer.github.io/awpgdip2022/ repo_name: GitHub docs_dir: doc/ nav: - Home: index.md - AutoDocs: autodoc.md - Back-end-testing: back-end-testing.md - Code: code.md - DAST: dast.md - Deployment: deployment.md - Installation: installation.md - Front-end-testing: front-end-testing.md - Monitoring: monitoring.md - SAST: sast.md theme: readthedocs Note1: The first paragpah is taken from Wikipedia Note2: The steps described in this document may require verification. This page is created by L00169827","title":"Auto Documentation"},{"location":"back-end-testing/","text":"Learn here: and here: An h1 header Panagyotis Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a An h2 header Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i) An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"Back-end-testing"},{"location":"back-end-testing/#panagyotis","text":"Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a","title":"Panagyotis"},{"location":"back-end-testing/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i)","title":"An h2 header"},{"location":"back-end-testing/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"An h3 header"},{"location":"code/","text":"Code Documentation The code documentation was generated by sphinx utility. The steps are described in autodoc.md documentation. To see the code documentation follow this link: Wicked-adventure This page was created by L00169827","title":"Code documentation"},{"location":"code/#code-documentation","text":"The code documentation was generated by sphinx utility. The steps are described in autodoc.md documentation. To see the code documentation follow this link: Wicked-adventure This page was created by L00169827","title":"Code Documentation"},{"location":"dast/","text":"Learn here: and here: An h1 header Panagiotis Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a An h2 header Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i) An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"DAST"},{"location":"dast/#panagiotis","text":"Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a","title":"Panagiotis"},{"location":"dast/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i)","title":"An h2 header"},{"location":"dast/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"An h3 header"},{"location":"deployment/","text":"Learn here: and here: An h1 header Wagner Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a An h2 header Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i) An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"Deployment"},{"location":"deployment/#wagner","text":"Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a","title":"Wagner"},{"location":"deployment/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i)","title":"An h2 header"},{"location":"deployment/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"An h3 header"},{"location":"front-end-testing/","text":"Front End testing The front end is the client-side section of a program. We can say that it involves everything visible while using an application. Every web application has a three-tier architecture. It includes clients, servers, and information systems or resources. The presentation layer comprises the client. Front end testers test this layer. They perform GUI testing and test usability and how a site or application works.* To perform Front End testing on the Project the Selenium Webdriver was used. The test is performed as part of front-end-testing.yml workflow. During this workflow run a Docker image is generated from the Project on push to Dev branch of the repo. Once this part is done, then the python file Front-end-tester.py . The following tests scenarios are done to confirm the Project is in a working condition: The code checks if the Search field presents on the main page of the Web-App A text inserted into that field and the search button is pressed. The test scrip press to Register button on the main page of the Web-App It types in all required values into fields for a new user registration and hits Submit It logs out from the user account, and tries to login back with the same credentials If the test script can find Add profile button, this means the login was successful Test has PASSED. Part of the test code is demontrated below: def check_register(): ''' This function checks if the user can get registered. If it successful, then function 'check_login()' uses same credentials to check if the user can get logged in. ''' home_button = driver.find_element(By.CSS_SELECTOR, \".material-icons-outlined\") home_button.click() time.sleep(1) register_button = driver.find_element(By.NAME, \"base_register_btn\") register_button.click() time.sleep(1) username_filed = driver.find_element(By.ID, \"username\") username_filed.send_keys(\"seleniumtester\") time.sleep(1) Note 1: The first paragraph is taken from here This page is created by L00169827","title":"Front-end-testing"},{"location":"front-end-testing/#front-end-testing","text":"The front end is the client-side section of a program. We can say that it involves everything visible while using an application. Every web application has a three-tier architecture. It includes clients, servers, and information systems or resources. The presentation layer comprises the client. Front end testers test this layer. They perform GUI testing and test usability and how a site or application works.* To perform Front End testing on the Project the Selenium Webdriver was used. The test is performed as part of front-end-testing.yml workflow. During this workflow run a Docker image is generated from the Project on push to Dev branch of the repo. Once this part is done, then the python file Front-end-tester.py .","title":"Front End testing"},{"location":"front-end-testing/#the-following-tests-scenarios-are-done-to-confirm-the-project-is-in-a-working-condition","text":"The code checks if the Search field presents on the main page of the Web-App A text inserted into that field and the search button is pressed. The test scrip press to Register button on the main page of the Web-App It types in all required values into fields for a new user registration and hits Submit It logs out from the user account, and tries to login back with the same credentials If the test script can find Add profile button, this means the login was successful Test has PASSED. Part of the test code is demontrated below: def check_register(): ''' This function checks if the user can get registered. If it successful, then function 'check_login()' uses same credentials to check if the user can get logged in. ''' home_button = driver.find_element(By.CSS_SELECTOR, \".material-icons-outlined\") home_button.click() time.sleep(1) register_button = driver.find_element(By.NAME, \"base_register_btn\") register_button.click() time.sleep(1) username_filed = driver.find_element(By.ID, \"username\") username_filed.send_keys(\"seleniumtester\") time.sleep(1) Note 1: The first paragraph is taken from here This page is created by L00169827","title":"The following tests scenarios are done to confirm the Project is in a working condition:"},{"location":"installation/","text":"Rodrigo Lima Installation of this project required the user to download or clone the git repository at: https://github.com/devopslecturer/awpgdip2022 Cloning Git Repository: Cloning a repository On GitHub.com, navigate to the main page of the repository. Above the list of files, click Code . To clone the repository using HTTPS, under \"Clone with HTTPS\", click . To clone the repository using an SSH key, including a certificate issued by your organization's SSH certificate authority, click Use SSH , then click . To clone a repository using GitHub CLI, click Use GitHub CLI , then click . Open Terminal Terminal Git Bash . Change the current working directory to the location where you want the cloned directory. Type git clone , and then paste the URL you copied earlier. $ git clone https://github.com/devopslecturer/awpgdip2022 Press Enter to create your local clone. $ git clone https://github.com/devopslecturer/awpgdip2022 > Cloning into `Spoon-Knife`... > remote: Counting objects: 10, done. > remote: Compressing objects: 100% (8/8), done. > remove: Total 10 (delta 1), reused 10 (delta 1) > Unpacking objects: 100% (10/10), done. Troubleshooting cloning errors When cloning a repository it's possible that you might encounter some errors. If you're unable to clone a repository, check that: You can connect using HTTPS. For more information, see \" HTTPS cloning errors .\" You have permission to access the repository you want to clone. For more information, see \" Error: Repository not found .\" The default branch you want to clone still exists. For more information, see \" Error: Remote HEAD refers to nonexistent ref, unable to checkout .\" Now that we have the repository cloned is time to install Docker and run the docker file and this will auto-generate everything you need in order to make the app run. Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. You can download and install Docker on multiple platforms. Refer to the following section and choose the best installation path for you. Docker Desktop for Mac \ud83d\udd17 A native application using the macOS sandbox security model which delivers all Docker tools to your Mac. Docker Desktop for Windows \ud83d\udd17 A native Windows application which delivers all Docker tools to your Windows computer. Docker for Linux \ud83d\udd17 Install Docker on a computer which already has a Linux distribution installed. Now it is time to run the Docker command and have your full environment ready! Press Enter to create your local Docker App. > git clone --branch Dev https://github.com/devopslecturer/awpgdip2022.git > cd awpgdip2022/ && sudo ./launch_wicket_adventures.sh Done \u263a!! Enjoy","title":"Installation"},{"location":"installation/#rodrigo-lima","text":"Installation of this project required the user to download or clone the git repository at: https://github.com/devopslecturer/awpgdip2022 Cloning Git Repository:","title":"Rodrigo Lima"},{"location":"monitoring/","text":"Learn here: and here: Amazon Cloud watch Monitoring We choosed amazon cloud watch monitoring because Amazon ECS service using the Fargate launch type is enabled for CloudWatch CPU and memory utilization metrics automatically. Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a An h2 header Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i) An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"Monitoring"},{"location":"monitoring/#amazon-cloud-watch-monitoring","text":"We choosed amazon cloud watch monitoring because Amazon ECS service using the Fargate launch type is enabled for CloudWatch CPU and memory utilization metrics automatically. Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a","title":"Amazon Cloud watch Monitoring"},{"location":"monitoring/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i)","title":"An h2 header"},{"location":"monitoring/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"An h3 header"},{"location":"sast/","text":"Learn here: and here: An h1 header Muhammad Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a An h2 header Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i) An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"SAST"},{"location":"sast/#muhammad","text":"Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a","title":"Muhammad"},{"location":"sast/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print(i)","title":"An h2 header"},{"location":"sast/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc , and to a section heading in the current doc . Here's a footnote [^1]. [^1]: Some footnote text. Tables can look like this: Name Size Material Color All Business 9 leather brown Roundabout 10 hemp canvas natural Cinderella 11 glass transparent Table: Shoes sizes, materials, and colors. (The above is the caption for the table.) Pandoc also supports multi-line tables: Keyword Text red Sunsets, apples, and other red or reddish things. green Leaves, grass, frogs and other things it's not easy being. A horizontal rule follows. Here's a definition list: apples : Good for making applesauce. oranges : Citrus! tomatoes : There's no \"e\" in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term and its definition to spread things out more.) Here's a \"line block\" (note how whitespace is honored): | Line one | Line too | Line tree and images can be specified like so: Inline math equation: $\\omega = d\\phi / dt$. Display math should get its own line like so: $$I = \\int \\rho R^{2} dV$$ And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc.","title":"An h3 header"}]}