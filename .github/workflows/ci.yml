# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - develop
      - main
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - main
      - develop


# three job definition
jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Install requirements # install application requirements
        run: pip install -r requirements.txt
        #- name: Check Syntax # check code formatting
        #run: pycodestyle --statistics .
      - name: Run Migrations # run migrations to create table in side car db container
        run: python manage.py migrate
      - name: Run Test # running tests
        run: python manage.py test
  package-job: # package job for building and publishing docker images
    runs-on: ubuntu-latest
    needs: [health-check-job] # will be fired if and only if health-check-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
    steps:
      - name: Checkout Code # checking out code.
        uses: actions/checkout@v2
      - name: What
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push Docker image
        id:  docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:${{ env.BRANCH }}
          build-args: |
               BRANCH=${{ env.BRANCH }}
          tag_with_sha: true # this will tag our image with commit id. For example our image our be gcr.io/project-id/github-django-actions/app:sha-7865423 where 7865423
  write-docs: # package job for building and publishing docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setting up a Virtual Enviroment
        run: |
          python -m venv venv && source venv/bin/activate &&  pip install -r requirements.txt

      - name: Automated Documention creation
        run: |
          cd doc && source ../venv/bin/activate && python ../venv/bin/sphinx-apidoc -f -d 8 -o . .. && make html && cd ..

      - name: Publishing documents to gh-pages branch.
        run: |
          pip install mkdocs
          git config user.name 'github-actions[bot]' && git config user.email 'github-actions[bot]@users.noreply.github.com'
          mkdocs gh-deploy --config-file mkdocs.yml --force


  deploy_staging_to_ecs:
    #if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-18.04
    needs: [package-job ]
    steps:
    - uses: silinternational/ecs-deploy@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-west-1'
      with:
        aws_access_key_cmd: '--aws-access-key'
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key_cmd: '--aws-secret-key'
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        cluster_cmd: '--cluster'
        cluster: 'wicked-webapp-prod'
        image_cmd: '--image'
        image: 'l00170338/wicked-webapp:develop'
        region_cmd: '--region'
        region: 'eu-west-1'
        service_name_cmd: '--service-name'
        service_name: 'wicked-webapp-stage'
        timeout_cmd: '--timeout'
        timeout: '360'


  deploy_production_to_ecs:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-18.04
    environment: 'prod'
    needs: [package-job, deploy_staging_to_ecs, ui-tests-newman-stage ]
    steps:
    - uses: silinternational/ecs-deploy@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-west-1'
      with:
        aws_access_key_cmd: '--aws-access-key'
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key_cmd: '--aws-secret-key'
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        cluster_cmd: '--cluster'
        cluster: 'wicked-webapp-prod'
        image_cmd: '--image'
        image: 'l00170338/wicked-webapp:main'
        region_cmd: '--region'
        region: 'eu-west-1'
        service_name_cmd: '--service-name'
        service_name: 'wicked-webapp-prod'
        timeout_cmd: '--timeout'
        timeout: '360'


  Sonar-Scan:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code # checking our the code at current commit that triggers the workflow
      uses: actions/checkout@v2

    - name: Cache dependency # caching dependency will make our build faster.
      uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Check Syntax # check code formatting with flake8
      run: | 
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --output-file=flake8.txt
    
    - name: Setting up a Virtual Enviroment
      run: |
        python -m venv venv && source venv/bin/activate &&  pip install -r requirements.txt   
    - name: Exporting secret key
      run: |
        echo "SECRET_KEY = 'django-insecure-_^39%)wfp910i*)2!2+ihrxbnrv$&44nm#pv-yf!7&mqhbgnkz'" > .env
    - name: Run Migrations # run migrations to create table in side db container
      run: |
          source venv/bin/activate && python3.9 manage.py migrate
    - name: Test on the app
      run: |
        coverage erase              
        coverage run manage.py test
        coverage xml -i
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITTOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  ui-tests-newman-stage:
    runs-on: ubuntu-latest
    needs: [ deploy_staging_to_ecs ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Running API tests for Staging system.
      run: |
        sudo apt install nodejs npm -y
        sudo npm install -g newman
        newman --version
        newman run ./tests/wicked-webapp-stage.postman_collection.json -e ./tests/wicked-webapp-stage.postman_collection.json

  ui-tests-newman-prod:
    runs-on: ubuntu-latest
    needs: [ deploy_production_to_ecs ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Running API tests for Production system.
      run: |
        sudo apt install nodejs npm -y
        sudo npm install -g newman
        newman --version
        newman run ./tests/wicked-webapp-prod.postman_collection.json -e ./tests/wicked-webapp-prod.postman_collection.json


  stackhawk-hawkscan:
    runs-on: ubuntu-latest
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Checkout code 
      uses: actions/checkout@v2
    
    - name: Updating system
      run: |
        sudo apt-get update
        sudo apt-get install \
           ca-certificates \
           curl \
           gnupg \
           lsb-release
    - name: Adding Official GPG key
      run: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    - name: Not sure what is going on here
      run: |
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    - name: Updating
      run: |
        sudo sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io     
    
    
    - name: Building App
      run: |
        sudo docker build . -f Dockerfile -t djangoapp
 
    - name: Running App
      run: |
        sudo docker run -d -p 8000:8000 djangoapp
        # docker run -it –-name Django_project –-rm -p 800:8000 Django-app:latest 
    
    - uses: stackhawk/hawkscan-action@v1.3.2
      with:
        apiKey: ${{ secrets.HAWK_API_KEY }}
        codeScanningAlerts: false
        githubToken: ${{ secrets.GITHUB_TOKEN }}


  UI_Testing_Selenium:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code 
      uses: actions/checkout@v2
    
    - name: Updating system
      run: |
        sudo apt-get update
        sudo apt-get install \
           ca-certificates \
           curl \
           gnupg \
           lsb-release
    - name: Adding Official GPG key
      run: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    - name: Not sure what is going on here
      run: |
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    - name: Updating
      run: |
        sudo sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io     
     
    - name: Building App
      run: |
        sudo docker build . -f Dockerfile -t djangoapp
 
    - name: Running App
      run: |
        sudo docker run -d -p 8000:8000 djangoapp
    - name: Installed package list
      run: apt list --installed

    - name: Remove Chrome
      run: sudo apt purge google-chrome-stable
      # Chromium is already installed!
      # - name: Install software
      #   run: sudo apt install -y chromium-browser
    - name: Install all necessary packages
      run: pip install requests beautifulsoup4 pandas webdriver-manager selenium
    - name: Run the Front-end Test
      run: python Front-end-tester.py
